(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{689:function(a,s,e){"use strict";e.r(s);var t=e(29),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"setup-komodo-notary-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup-komodo-notary-node"}},[a._v("#")]),a._v(" Setup Komodo Notary Node")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Disclaimer")]),a._v(" "),e("p",[a._v("This guide is here to give guidance and a general understanding on building a Komodo Notary Node server. It describes how to build the two required notary node servers: "),e("strong",[a._v("Mainnet")]),a._v(" and "),e("strong",[a._v("Third Party(3P)")]),a._v(". It is possible that some instructions could be deprecated by the time you read it, please refer to "),e("a",{attrs:{href:"https://github.com/KomodoPlatform/dPoW/blob/master/doc",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/KomodoPlatform/dPoW/blob/master/doc"),e("OutboundLink")],1),a._v(" for more recent updates")])]),a._v(" "),e("p",[a._v('Note that, whenever the "Main Server" is referenced, it is referring to the server that is used to notarize Komodo and Smart Chains to Litecoin. Whenever "3rd Party server" is referenced, it is referring to the server that is used to notarize any 3rd party coin to Komodo.')]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[a._v("Check out "),e("a",{attrs:{href:"https://github.com/webworker01/nntools#setup",target:"_blank",rel:"noopener noreferrer"}},[a._v("Webworker01's nnTools"),e("OutboundLink")],1),a._v(" for a simple hands off setup for your notary nodes.")])]),a._v(" "),e("p",[a._v("This guide will explain how to setup your Main Server, then go through the process of setting up the 3rd Party Server separately. After that there are instructions on how to create your Notary Node "),e("code",[a._v("pubkeys")]),a._v(", import them to your servers and then, create a basic start script for each server. Having a second server is now a requirement for Komodo Notary Nodes.")]),a._v(" "),e("p",[a._v("If you face problems, please join the "),e("code",[a._v("#notarynode")]),a._v(" channel on the "),e("a",{attrs:{href:"https://komodoplatform.com/discord",target:"_blank",rel:"noopener noreferrer"}},[a._v("Komodo Discord Server"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"nn-repo-quick-reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nn-repo-quick-reference"}},[a._v("#")]),a._v(" NN Repo Quick Reference")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[a._v("We recommend the Notary Node Operators to check the Table at "),e("a",{attrs:{href:"https://github.com/komodoplatform/dpow#dpow-asset-status",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/komodoplatform/dpow#dpow-asset-status"),e("OutboundLink")],1),a._v(" for latest information on the repositories and branches to run. If there is contradicting information in this document, treat the information at "),e("a",{attrs:{href:"https://github.com/komodoplatform/dpow#dpow-asset-status",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/komodoplatform/dpow#dpow-asset-status"),e("OutboundLink")],1),a._v(" as correct and inform the team through the "),e("a",{attrs:{href:"https://komodoplatform.com/discord",target:"_blank",rel:"noopener noreferrer"}},[a._v("Komodo Discord Server"),e("OutboundLink")],1),a._v(" or by submitting a Pull Request (PR). Using the "),e("strong",[a._v("exact")]),a._v(" repository and branch/tag recommended is very important for the security of the network.")])]),a._v(" "),e("h3",{attrs:{id:"both-servers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#both-servers"}},[a._v("#")]),a._v(" Both Servers")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("KMD:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/KomodoPlatform/komodo/tree/d456be35acd1f8584e1e4f971aea27bd0644d5c5",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/KomodoPlatform/komodo/tree/d456be35acd1f8584e1e4f971aea27bd0644d5c5"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("d456be35acd1f8584e1e4f971aea27bd0644d5c5")])]),a._v(" "),e("li",[e("strong",[a._v("Iguana (no autosplit):")]),a._v(" "),e("a",{attrs:{href:"https://github.com/KomodoPlatform/dPoW",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/KomodoPlatform/dPoW"),e("OutboundLink")],1),a._v(" Branch: "),e("code",[a._v("master")])])]),a._v(" "),e("h3",{attrs:{id:"main-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-server"}},[a._v("#")]),a._v(" Main Server")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("LTC:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/litecoin-project/litecoin",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/litecoin-project/litecoin"),e("OutboundLink")],1),a._v(" Branch: "),e("code",[a._v("0.16")])])]),a._v(" "),e("p",[e("em",[a._v("To notarise KMD -> LTC, the "),e("code",[a._v('-notary=".litecoin/litecoin.conf"')]),a._v(" flag is required when launching KMD.")])]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[a._v("You should have at least 64GB RAM and 32 GB "),e("a",{attrs:{href:"https://www.digitalocean.com/community/tutorial_collections/how-to-add-swap-space",target:"_blank",rel:"noopener noreferrer"}},[a._v("swap space"),e("OutboundLink")],1),a._v(" on your main server to avoid daemons crashing due to OOM.")])]),a._v(" "),e("h3",{attrs:{id:"_3rd-party-server-some-of-these-are-yet-to-update-check-discord-for-status-operators-can-still-build-and-sync-the-chains-to-present-using-the-current-versions-before-the-actual-update-needed-for-s6-is-available"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3rd-party-server-some-of-these-are-yet-to-update-check-discord-for-status-operators-can-still-build-and-sync-the-chains-to-present-using-the-current-versions-before-the-actual-update-needed-for-s6-is-available"}},[a._v("#")]),a._v(" 3rd Party Server (some of these are yet to update - check discord for status - operators can still build and sync the chains to present using the current versions before the actual update needed for S6 is available)")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("AYA:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/KomodoPlatform/AYAv2",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/KomodoPlatform/AYAv2"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("94e6bc000c77401ac1b36f27a43d391984e81ac3")])]),a._v(" "),e("li",[e("strong",[a._v("CHIPS:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/chips-blockchain/chips.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/chips-blockchain/chips.git"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("6e7560a69975d4419b3e36c817cdba6401bc8aed")])]),a._v(" "),e("li",[e("strong",[a._v("EMC2:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/emc2foundation/einsteinium.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/emc2foundation/einsteinium.git"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("c329ae64397bea743054d06b779bb4cbfdcdd25f")])]),a._v(" "),e("li",[e("strong",[a._v("MCL:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/marmarachain/marmara.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/marmarachain/marmara.git"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("a92d8344d3c545b2641a1e04479c90d19588abe7")])]),a._v(" "),e("li",[e("strong",[a._v("MIL:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/emc2foundation/mil.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/emc2foundation/mil.git"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("578bed7f403c4d4a16561317d356202ca60c605f")])]),a._v(" "),e("li",[e("strong",[a._v("SFUSD:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/pbcllc/sfusd-core.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/pbcllc/sfusd-core.git"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("4e79e1bbf9faa5305ed1091e863ef081c9272a8e")])]),a._v(" "),e("li",[e("strong",[a._v("TOKEL:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/TokelPlatform/tokel.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/TokelPlatform/tokel.git"),e("OutboundLink")],1),a._v(" Tree: "),e("code",[a._v("65d50d07fb5a3bf9cfa57033f1a1c25f4b37511e")])]),a._v(" "),e("li",[e("strong",[a._v("VRSC:")]),a._v(" "),e("a",{attrs:{href:"https://github.com/VerusCoin/VerusCoin.git",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/VerusCoin/VerusCoin.git"),e("OutboundLink")],1),a._v(" Tag: "),e("code",[a._v("master")]),a._v("  (S6 updates not yet merged!)")])]),a._v(" "),e("h2",{attrs:{id:"requirements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[a._v("#")]),a._v(" Requirements")]),a._v(" "),e("h3",{attrs:{id:"hardware"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hardware"}},[a._v("#")]),a._v(" Hardware")]),a._v(" "),e("h4",{attrs:{id:"main-server-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-server-2"}},[a._v("#")]),a._v(" Main Server")]),a._v(" "),e("p",[a._v("Komodo Notary Node currently only works on Linux. To setup Komodo Notary Node be sure you have a solid server with the following minimum requirements:")]),a._v(" "),e("ul",[e("li",[a._v("OS: Debian/Ubuntu LTS x64 - minimal installation with Openssh server (recommended).")]),a._v(" "),e("li",[a._v("CPU: A High-Performance CPU (e.g. Xeon, i7/i9, Ryzen, EPYC, etc.)")]),a._v(" "),e("li",[a._v("RAM: 64 GB or more")]),a._v(" "),e("li",[a._v("Disk: 1 TB SSD or greater")]),a._v(" "),e("li",[a._v("Bandwidth: 100 Mbps or higher")]),a._v(" "),e("li",[a._v("Location: The region where you were elected (refer to Komodo region documentation, but you should already know based on elections)")])]),a._v(" "),e("h4",{attrs:{id:"_3rd-party-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3rd-party-server"}},[a._v("#")]),a._v(" 3rd Party Server")]),a._v(" "),e("p",[a._v("At the moment the current minimum server specs are listed below, however, this may change as more 3rd party coins require notarizing.")]),a._v(" "),e("ul",[e("li",[a._v("OS: Debian/Ubuntu LTS x64 - minimal installation with Openssh server (recommended).")]),a._v(" "),e("li",[a._v("CPU: A High-Performance CPU (e.g. Xeon, i7/i9, Ryzen, EPYC, etc.)")]),a._v(" "),e("li",[a._v("RAM: 32 GB or more")]),a._v(" "),e("li",[a._v("Disk: 500 GB SSD or greater")]),a._v(" "),e("li",[a._v("Bandwidth: 100 Mbps or higher")]),a._v(" "),e("li",[a._v("Location: Within the same region as your main server (not required to be in the same datacenter)")])]),a._v(" "),e("h3",{attrs:{id:"security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#security"}},[a._v("#")]),a._v(" Security")]),a._v(" "),e("p",[e("em",[a._v("Before doing anything further, please ensure that your server is secure.")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Update the Operating System: "),e("code",[a._v("sudo apt-get update && sudo apt-get upgrade -y")])])]),a._v(" "),e("li",[e("p",[a._v("Install "),e("a",{attrs:{href:"https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fail2ban"),e("OutboundLink")],1),a._v(".")])]),a._v(" "),e("li",[e("p",[a._v("Perform Initial Setup for "),e("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04",target:"_blank",rel:"noopener noreferrer"}},[a._v("creating new user, give it "),e("code",[a._v("sudo")]),a._v(" permission"),e("OutboundLink")],1),a._v(", "),e("a",{attrs:{href:"https://linuxhandbook.com/change-ssh-port/",target:"_blank",rel:"noopener noreferrer"}},[a._v("change SSH port"),e("OutboundLink")],1),a._v(", "),e("a",{attrs:{href:"https://www.howtogeek.com/howto/linux/security-tip-disable-root-ssh-login-on-linux/",target:"_blank",rel:"noopener noreferrer"}},[a._v("disable "),e("code",[a._v("root")]),a._v(" login"),e("OutboundLink")],1),a._v(", "),e("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server",target:"_blank",rel:"noopener noreferrer"}},[a._v("disable password authentication for login"),e("OutboundLink")],1)])]),a._v(" "),e("li",[e("p",[a._v("Please run processes as an unprivileged user and use "),e("code",[a._v("sudo")]),a._v(" where necessary")])])]),a._v(" "),e("p",[e("strong",[a._v("Here is a repo with automated scripts to prepare your fresh Ubuntu server with initial setup "),e("a",{attrs:{href:"https://github.com/webworker01/freshubuntu",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/webworker01/freshubuntu"),e("OutboundLink")],1)])]),a._v(" "),e("h2",{attrs:{id:"initial-server-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#initial-server-setup"}},[a._v("#")]),a._v(" Initial Server Setup")]),a._v(" "),e("p",[a._v("The instructions below are required.")]),a._v(" "),e("h3",{attrs:{id:"install-required-dependencies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-required-dependencies"}},[a._v("#")]),a._v(" Install Required Dependencies")]),a._v(" "),e("p",[a._v("Main:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" build-essential pkg-config bsdmainutils libtool libsodium-dev libc6-dev libssl-dev libcurl4-gnutls-dev ncurses-dev zlib1g-dev cmake clang m4 automake autoconf g++-multilib python python3 python3-zmq "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" jq "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("unzip")]),a._v(" libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev -y\n")])])]),e("p",[a._v("3rd Party:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("apt-get")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev python3-zmq zlib1g-dev "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" bsdmainutils automake cmake clang libsodium-dev libcurl4-gnutls-dev libssl-dev "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("unzip")]),a._v(" python jq "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("htop")]),a._v(" -y\n")])])]),e("p",[a._v("Note: If using Ubuntu-18.4, install "),e("code",[a._v("python-zmq")]),a._v(" instead of "),e("code",[a._v("python3-zmq")])]),a._v(" "),e("h3",{attrs:{id:"install-nanomsg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-nanomsg"}},[a._v("#")]),a._v(" Install "),e("code",[a._v("nanomsg")])]),a._v(" "),e("p",[a._v("Required by iguana")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/nanomsg/nanomsg\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" nanomsg\ncmake "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" -DNN_TESTS"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("OFF -DNN_ENABLE_DOC"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("OFF\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -j2\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" ldconfig\n")])])]),e("h2",{attrs:{id:"install-komodo-by-compiling-it-from-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-komodo-by-compiling-it-from-source"}},[a._v("#")]),a._v(" Install Komodo by compiling it from source")]),a._v(" "),e("h3",{attrs:{id:"clone-the-source-checkout-d456be35acd1f8584e1e4f971aea27bd0644d5c5-tree-and-compile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clone-the-source-checkout-d456be35acd1f8584e1e4f971aea27bd0644d5c5-tree-and-compile"}},[a._v("#")]),a._v(" Clone the source, checkout "),e("code",[a._v("d456be35acd1f8584e1e4f971aea27bd0644d5c5")]),a._v(" tree and compile")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/KomodoPlatform/komodo\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" komodo\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout d456be35acd1f8584e1e4f971aea27bd0644d5c5\n./zcutil/fetch-params.sh\n./zcutil/build.sh -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[e("code",[a._v("-j$(nproc)")]),a._v(" uses all the available processor threads while compiling. If you don't want to use all threads, you may specify the number directly like so: "),e("code",[a._v("-j8")]),a._v(" will use only 8 threads; Alternatively, you may like to use "),e("code",[a._v("-j$(expr $(nproc) - 1)")]),a._v(", which will use all the available processors except one.")])]),a._v(" "),e("h3",{attrs:{id:"symlink-the-compiled-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symlink-the-compiled-binaries"}},[a._v("#")]),a._v(" Symlink the compiled binaries")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/komodo/src/komodo-cli /usr/local/bin/komodo-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/komodo/src/komodod /usr/local/bin/komodod\n")])])]),e("h3",{attrs:{id:"create-the-data-dir-komodo-conf-file-and-secure-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-the-data-dir-komodo-conf-file-and-secure-it"}},[a._v("#")]),a._v(" Create the data dir, "),e("code",[a._v("komodo.conf")]),a._v(" file and secure it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .komodo\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.komodo/komodo.conf\n")])])]),e("p",[a._v("Add the following lines to the "),e("code",[a._v("komodo.conf")]),a._v(" file and save it (replace rpcuser and rpcpassword)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("usernameChangeItToSomethingSecure\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("passwordChangeItToSomethingSecure\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("server")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcworkqueue")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("256")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcbind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcallowip")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("77.75")]),a._v(".121.138\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("95.213")]),a._v(".238.100\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("94.130")]),a._v(".148.142\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("103.6")]),a._v(".12.105\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("139.99")]),a._v(".209.214\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("185.130")]),a._v(".212.13\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.9")]),a._v(".142.219\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("200.25")]),a._v(".4.38\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("139.99")]),a._v(".136.148\n")])])]),e("p",[a._v("Restrict access to the "),e("code",[a._v("komodo.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.komodo/komodo.conf\n")])])]),e("hr"),a._v(" "),e("h2",{attrs:{id:"generate-two-pubkey-address-wif-s"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-two-pubkey-address-wif-s"}},[a._v("#")]),a._v(" Generate two "),e("code",[a._v("pubkey")]),a._v(", "),e("code",[a._v("address")]),a._v(" & "),e("code",[a._v("WIF")]),a._v("'s")]),a._v(" "),e("p",[a._v("The mainnet notary node operators have to provide 2 seperate pubkeys, one for your Main Server and one for your 3rd Party Server. This means you will have to generate 2 seed phrases (i.e passphrases) individually which will generate the 2 pubkeys, set of addresses and private keys (WIF). You will need to create your Main pubkey on your Main Server & follow the same actions on your 3rd Party Server for your 3rd Party pubkey. These pubkeys need to be PR'd into your proposal on "),e("a",{attrs:{href:"https://github.com/KomodoPlatform/NotaryNodes",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/KomodoPlatform/NotaryNodes"),e("OutboundLink")],1),a._v(" soon after an election.")]),a._v(" "),e("p",[e("strong",[a._v("DO NOT IMPORT YOUR MAIN PUBKEY INTO ANY 3RD PARTY DAEMON. For security, you should never enter your seed phrase or privatekey in any other node than your specific notary node server. If you ever expose a private key for any particular coin, it can be converted to all other coins easily.")])]),a._v(" "),e("h3",{attrs:{id:"generating-a-pubkey"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generating-a-pubkey"}},[a._v("#")]),a._v(" Generating a pubkey")]),a._v(" "),e("p",[a._v("The mainnet notary node operators need to provide 2 sets of pubkey to Kolo when he asks for it (pubkey starts with "),e("code",[a._v("02")]),a._v(" or "),e("code",[a._v("03")]),a._v("). Follow "),e("RouterLink",{attrs:{to:"/notary/generate-privkeys-third-party-coins-from-passphrase.html"}},[a._v("this guide")]),a._v(' to generate all the required info in your own server. You will need the "Compressed Public Key", "Compressed WIF" and "Compressed Address" from the output generated by the script. Based on the default seed used in the '),e("code",[a._v("genkomodo.php")]),a._v(" file, we get the following information:")],1),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("Pubkey: 02a854251adfee222bede8396fed0756985d4ea905f72611740867c7a4ad6488c1\n\nLTC Address: LfK5cYTTSDoSVSYtxkTVv8dGnqXYZRsn86\nLTC WIF: 6vCN7rsS1bPFgs98G2PQgcHP2EArh39Un1QDh16YrPrJxCZTthq\n\nKMD Address: RVNKRr2uxPMxJeDwFnTKjdtiLtcs7UzCZn\nKMD WIF: UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\n\nEMC2 Address: EdF2quz8nWrJDwTbbTTieFYUMGfPsVB5dv\nEMC2 WIF: T7trfubd9dBEWe3EnFYfj1r1pBueqqCaUUVKKEvLAfQvz3JFsNhs\n\nAYA Address: AVjkMgFfmMZbpFvmTxCcxadnD6g1EdQue3\nAYA WIF: T6oxgc9ZYJA1Uvsm31Gb8Mg31hHgLWue7RuqQMjEHUWZEi5TdskL\n")])])]),e("p",[a._v("CHIPS, all Komodo Smart Chains and Komodo source forks like VRSC use the same address and WIF format as Komodo (KMD).")]),a._v(" "),e("p",[a._v("It is recommended that you write down the randomly generated seed (24 words) in a piece of paper and type directly into your server. Do not keep the seed saved in your local computer.")]),a._v(" "),e("p",[a._v("We will import these keys into our coin daemons and validate them later in this guide.")]),a._v(" "),e("hr"),a._v(" "),e("h2",{attrs:{id:"setup-iguana"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup-iguana"}},[a._v("#")]),a._v(" Setup Iguana")]),a._v(" "),e("p",[a._v("On both servers:")]),a._v(" "),e("h3",{attrs:{id:"clone-the-repository-and-build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clone-the-repository-and-build"}},[a._v("#")]),a._v(" Clone the repository and build")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/KomodoPlatform/dPoW -b master\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" dPoW/iguana\n./m_notary_build\n")])])]),e("h3",{attrs:{id:"create-a-pubkey-txt-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-pubkey-txt-file"}},[a._v("#")]),a._v(" Create a "),e("code",[a._v("pubkey.txt")]),a._v(" file")]),a._v(" "),e("p",[a._v("You will need to create a "),e("code",[a._v("pubkey.txt")]),a._v(" file inside "),e("code",[a._v("~/dPoW/iguana")]),a._v(" directory. This file will be used to start the dPoW process in the "),e("code",[a._v("dpowassets")]),a._v(" script later on. "),e("code",[a._v("pubkey.txt")]),a._v(" file should contain only the pubkey of the appropriate server. The file should contain only the information in the example below. Change "),e("code",[a._v("02a854251adfee222bede8396fed0756985d4ea905f72611740867c7a4ad6488c1")]),a._v(" to the appropriate pubkey for the server the file is on.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("pubkey")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("02a854251adfee222bede8396fed0756985d4ea905f72611740867c7a4ad6488c1\n")])])]),e("h3",{attrs:{id:"main-server-iguana"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-server-iguana"}},[a._v("#")]),a._v(" Main Server Iguana")]),a._v(" "),e("p",[a._v("The main server iguana will use the port 7776.")]),a._v(" "),e("h4",{attrs:{id:"create-wp-7776"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-wp-7776"}},[a._v("#")]),a._v(" Create "),e("code",[a._v("wp_7776")])]),a._v(" "),e("p",[a._v("Create "),e("code",[a._v("wp_7776")]),a._v(" file inside the "),e("code",[a._v("~/dPoW/iguana")]),a._v(" directory with the same passphrase you used to generate your Main address/pubkey. The file should look as follows (replace "),e("code",[a._v("YOUR_VERY_SECURE_PASSPHRASE")]),a._v(" with your own):")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" --url "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://127.0.0.1:7776"')]),a._v(" --data "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"{'),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("method"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(":"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("walletpassphrase"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(","),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("params"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(":["),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("YOUR_VERY_SECURE_PASSPHRASE"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(', 9999999]}"')]),a._v("\n")])])]),e("h4",{attrs:{id:"make-wp-7776-file-executable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#make-wp-7776-file-executable"}},[a._v("#")]),a._v(" Make "),e("code",[a._v("wp_7776")]),a._v(" file executable")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("700")]),a._v(" wp_7776\n")])])]),e("h3",{attrs:{id:"_3rd-party-server-iguana"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3rd-party-server-iguana"}},[a._v("#")]),a._v(" 3rd Party Server Iguana")]),a._v(" "),e("p",[a._v("The 3rd party server iguana will use the port 7779.")]),a._v(" "),e("h4",{attrs:{id:"create-wp-7779"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-wp-7779"}},[a._v("#")]),a._v(" Create "),e("code",[a._v("wp_7779")])]),a._v(" "),e("p",[a._v("Create "),e("code",[a._v("wp_7779")]),a._v(" file inside the "),e("code",[a._v("~/dPoW/iguana")]),a._v(" directory with the same passphrase you used to generate your 3rd Party address/pubkey. The file should look as follows (replace "),e("code",[a._v("YOUR_VERY_SECURE_PASSPHRASE")]),a._v(" with your own):")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" --url "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://127.0.0.1:7779"')]),a._v(" --data "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"{'),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("method"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(":"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("walletpassphrase"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(","),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("params"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(":["),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v("YOUR_VERY_SECURE_PASSPHRASE"),e("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[a._v('\\"')]),a._v(', 9999999]}"')]),a._v("\n")])])]),e("h4",{attrs:{id:"make-wp-7779-file-executable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#make-wp-7779-file-executable"}},[a._v("#")]),a._v(" Make "),e("code",[a._v("wp_7779")]),a._v(" file executable")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("700")]),a._v(" wp_7779\n")])])]),e("hr"),a._v(" "),e("h2",{attrs:{id:"main-server-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-server-setup"}},[a._v("#")]),a._v(" Main Server Setup")]),a._v(" "),e("p",[a._v("The instructions below are only required on your main server, which is the one that will be notarizing Komodo, all the Smart Chains and runtime forks to Litecoin. The instructions below are for Ubuntu 20.04. If running on Debian 11x, check the alternative instructions at the bottom of this document.")]),a._v(" "),e("h3",{attrs:{id:"litecoin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#litecoin"}},[a._v("#")]),a._v(" Litecoin")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-litecoin-source-code-and-checkout-version-16-x"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-litecoin-source-code-and-checkout-version-16-x"}},[a._v("#")]),a._v(" Step 1: Clone Litecoin source-code and checkout version 16.x")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/litecoin-project/litecoin --branch "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.16")]),a._v(" --single-branch\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" litecoin\n")])])]),e("h4",{attrs:{id:"step-2-create-a-build-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),e("p",[a._v("Name the script as "),e("code",[a._v("build.sh")]),a._v(" inside the "),e("code",[a._v("~/litecoin")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks for the binaries at "),e("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),e("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC & 3P Coins build script for Ubuntu & Debian (c) Decker")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/litecoin/src/litecoin-cli /usr/local/bin/litecoin-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/litecoin/src/litecoind /usr/local/bin/litecoind\n")])])]),e("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),e("h4",{attrs:{id:"step-4-create-litecoin-data-dir-litecoin-conf-file-and-restrict-access-to-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-litecoin-data-dir-litecoin-conf-file-and-restrict-access-to-it"}},[a._v("#")]),a._v(" Step 4: Create Litecoin data dir, "),e("code",[a._v("litecoin.conf")]),a._v(" file and restrict access to it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .litecoin\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.litecoin/litecoin.conf\n")])])]),e("p",[a._v("Insert the following contents inside the "),e("code",[a._v("litecoin.conf")]),a._v(" file and save it. (change the "),e("code",[a._v("rpcuser")]),a._v(" and "),e("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcport")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9332")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("litecoinrpcChangeThisToSomethingSecure\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("passwordChangeThisToSomethingSecure\n")])])]),e("p",[a._v("Restrict access to the "),e("code",[a._v("litecoin.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.litecoin/litecoin.conf\n")])])]),e("h3",{attrs:{id:"start-the-daemons-and-sync-all-the-chains"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-the-daemons-and-sync-all-the-chains"}},[a._v("#")]),a._v(" Start the daemons and sync all the chains")]),a._v(" "),e("p",[a._v("For the first time sync, we will run all the coin daemons normally. Make sure you have successfully compiled all the daemons from the above section. We will create a "),e("code",[a._v("start")]),a._v(" script later in this guide to start the chains with "),e("code",[a._v("-pubkey")]),a._v(" option for notarization.")]),a._v(" "),e("h3",{attrs:{id:"start-the-coins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-the-coins"}},[a._v("#")]),a._v(" Start the coins")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodod "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nlitecoind "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n")])])]),e("h3",{attrs:{id:"start-komodo-and-all-the-smart-chains"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-komodo-and-all-the-smart-chains"}},[a._v("#")]),a._v(" Start Komodo and all the Smart Chains")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~/komodo/src\n./assetchains.old\n")])])]),e("p",[a._v("Now wait for all the chains to finish syncing. This might take about 8-10 hours depending on your machine and internet connection. You can check check sync progress by using "),e("code",[a._v("tail -f")]),a._v(" on the "),e("code",[a._v("debug.log")]),a._v(" file in the respective coin data directories. Komodo Smart Chains have their own data directory inside the "),e("code",[a._v("~/.komodo")]),a._v(" directory.")]),a._v(" "),e("p",[a._v("Commands to tail "),e("code",[a._v("debug.log")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.litecoin/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# KMD")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# SUPERNET")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/SUPERNET/debug.log\n")])])]),e("p",[a._v("For any other Komodo Smart Chain, use the example of SUPERNET and change the path with the coin name that you are looking for accordingly. You can now wait for all the coins to finish syncing. Just double check the blocks you've downloaded with an explorer to verify.")]),a._v(" "),e("h3",{attrs:{id:"import-your-main-private-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import-your-main-private-key"}},[a._v("#")]),a._v(" Import your main private key")]),a._v(" "),e("p",[a._v("Feel free to import these as the daemons are syncing.")]),a._v(" "),e("ul",[e("li",[a._v("Follow the below example to import your main pubkey "),e("strong",[a._v("only")]),a._v(" into your coin daemons.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodo-cli importprivkey "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("KMD PRIVATE KEY"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\nlitecoin-cli importprivkey "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("LTC PRIVATE KEY"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),e("ul",[e("li",[a._v("For all other Komodo Smart Chains, use the following command to import privkey")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~/komodo/src\n./fiat-cli importprivkey "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("KMD PRIVATE KEY"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),e("p",[a._v("This command will import keys into all Smart Chains that are using the main Komodo daemon. This may take some time and will display the coin name and address after each import. You can tail the coin specific "),e("code",[a._v("debug.log")]),a._v(" files to check the progress.")]),a._v(" "),e("h3",{attrs:{id:"validate-the-addresses"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#validate-the-addresses"}},[a._v("#")]),a._v(" Validate the addresses")]),a._v(" "),e("p",[a._v("After all the addresses are imported, using the respective "),e("code",[a._v("<COIN>-cli")]),a._v(", validate all addresses and make sure the response has "),e("code",[a._v("ismine:true")]),a._v(". If you have "),e("code",[a._v("ismine:false")]),a._v(", your address wasn't imported correctly and dPoW will not work for that coin. Sample command for that is below.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodo-cli validateaddress RVNKRr2uxPMxJeDwFnTKjdtiLtcs7UzCZn\n")])])]),e("h4",{attrs:{id:"copy-the-pubkey-txt-file-that-we-created-from-the-dpow-iguana-dir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy-the-pubkey-txt-file-that-we-created-from-the-dpow-iguana-dir"}},[a._v("#")]),a._v(" Copy the "),e("code",[a._v("pubkey.txt")]),a._v(" file that we created from the "),e("code",[a._v("~/dPoW/iguana")]),a._v(" dir")]),a._v(" "),e("p",[a._v("You will need to create a "),e("code",[a._v("pubkey.txt")]),a._v(" file inside "),e("code",[a._v("~/komodo/src/")]),a._v(". This file will be used to start all of your daemons with the "),e("code",[a._v("-pubkey=")]),a._v(" parameter in your "),e("code",[a._v("start")]),a._v(" script that will be made later in this guide.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" ~/dPoW/iguana/pubkey.txt ~/komodo/src/pubkey.txt\n")])])]),e("h3",{attrs:{id:"stop-all-the-coin-daemons-safely"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stop-all-the-coin-daemons-safely"}},[a._v("#")]),a._v(" Stop All the Coin Daemons Safely")]),a._v(" "),e("p",[a._v("Once you've completed syncing, imported and validated your keys in all your daemons, complete the following.")]),a._v(" "),e("p",[a._v("Never use "),e("code",[a._v("kill -9")]),a._v(" to kill any Coin daemon if you don't like corrupt databases. Always shutdown wallet daemon and iguana gracefully with "),e("code",[a._v("pkill -15 iguana")]),a._v(" or use the below RPC commands for wallets.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodo-cli stop\nlitecoin-cli stop\n")])])]),e("p",[a._v("For all other Komodo Smart Chains, use the following command to "),e("code",[a._v("stop")]),a._v(" the daemons.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~/komodo/src\n./fiat-cli stop\n")])])]),e("h3",{attrs:{id:"after-all-the-chains-daemons-were-stopped-gracefully-let-s-restrict-access-to-all-the-komodo-smart-chains-conf-files-inside-komodo-dir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#after-all-the-chains-daemons-were-stopped-gracefully-let-s-restrict-access-to-all-the-komodo-smart-chains-conf-files-inside-komodo-dir"}},[a._v("#")]),a._v(" After all the chains' daemons were stopped gracefully, let's restrict access to all the Komodo Smart Chains' "),e("code",[a._v(".conf")]),a._v(" files inside "),e("code",[a._v("~/.komodo")]),a._v(" dir")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),a._v(" ~/.komodo -type f -iname "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"*.conf"')]),a._v(" -exec "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("To complete setting up your main server, go to the "),e("a",{attrs:{href:"#set-ulimit-parameters-on-ubuntu-permanently"}},[a._v("Set 'ulimit' parameters on Ubuntu permanently")]),a._v(" section.")]),a._v(" "),e("hr"),a._v(" "),e("h2",{attrs:{id:"_3rd-party-server-setup-pending-third-party-updates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3rd-party-server-setup-pending-third-party-updates"}},[a._v("#")]),a._v(" 3rd Party Server Setup (Pending third party updates)")]),a._v(" "),e("p",[a._v("The instructions below are only required on your 3rd party server, which is the one that will be notarizing 3rd party coins to Komodo.")]),a._v(" "),e("h3",{attrs:{id:"aryacoin-aya"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aryacoin-aya"}},[a._v("#")]),a._v(" Aryacoin (AYA)")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-aya-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-aya-source"}},[a._v("#")]),a._v(" Step 1: Clone AYA source")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/KomodoPlatform/AYAv2\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" AYAv2\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 94e6bc0\n")])])]),e("h4",{attrs:{id:"step-2-create-a-build-script-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script-2"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),e("p",[a._v("Name the script as "),e("code",[a._v("build.sh")]),a._v(" inside the "),e("code",[a._v("~/AYAv2")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks for the binaries at "),e("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),e("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC & 3P Coins build script for Ubuntu & Debian (c) Decker")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/AYAv2/src/aryacoin-cli /usr/local/bin/aryacoin-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/AYAv2/src/aryacoind /usr/local/bin/aryacoind\n")])])]),e("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-2"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),e("h4",{attrs:{id:"step-4-create-aya-data-dir-aryacoin-conf-file-and-restrict-access-to-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-aya-data-dir-aryacoin-conf-file-and-restrict-access-to-it"}},[a._v("#")]),a._v(" Step 4: Create AYA data dir, "),e("code",[a._v("aryacoin.conf")]),a._v(" file and restrict access to it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .aryacoin\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.aryacoin/aryacoin.conf\n")])])]),e("p",[a._v("Insert the following contents inside the "),e("code",[a._v("aryacoin.conf")]),a._v(" file and save it. (change the "),e("code",[a._v("rpcuser")]),a._v(" and "),e("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("server")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("bind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcbind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcallowip")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev_3p.smk.dog\n")])])]),e("p",[a._v("Restrict access to the "),e("code",[a._v("aryacoin.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.aryacoin/aryacoin.conf\n")])])]),e("h3",{attrs:{id:"chips"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chips"}},[a._v("#")]),a._v(" Chips")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-chips-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-chips-source"}},[a._v("#")]),a._v(" Step 1: Clone CHIPS source")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/chips-blockchain/chips -b master\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" chips\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 6e7560a\n")])])]),e("h4",{attrs:{id:"step-2-build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-build"}},[a._v("#")]),a._v(" Step 2: Build")]),a._v(" "),e("h5",{attrs:{id:"ubuntu-18-04"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-18-04"}},[a._v("#")]),a._v(" Ubuntu 18.04")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("./build.sh\n")])])]),e("h5",{attrs:{id:"debian-10-11-and-ubuntu-20-04"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#debian-10-11-and-ubuntu-20-04"}},[a._v("#")]),a._v(" Debian 10/11 and Ubuntu 20.04")]),a._v(" "),e("p",[a._v("Replace the contents of the "),e("code",[a._v("build.sh")]),a._v(" file with the following code")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC & 3P Coins build script for Ubuntu & Debian (c) Decker")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("p",[a._v("then, run the script")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("./build.sh\n")])])]),e("h4",{attrs:{id:"step-3-symlink-the-compiled-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-symlink-the-compiled-binaries"}},[a._v("#")]),a._v(" Step 3: Symlink the compiled binaries")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/chips/src/chips-cli /usr/local/bin/chips-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/chips/src/chipsd /usr/local/bin/chipsd\n")])])]),e("h4",{attrs:{id:"step-4-create-chips-data-dir-chips-conf-file-and-restrict-access-to-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-chips-data-dir-chips-conf-file-and-restrict-access-to-it"}},[a._v("#")]),a._v(" Step 4: Create CHIPS data dir, "),e("code",[a._v("chips.conf")]),a._v(" file and restrict access to it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .chips\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.chips/chips.conf\n")])])]),e("p",[a._v("Insert the following contents inside the "),e("code",[a._v("chips.conf")]),a._v(" file and save it. (change the "),e("code",[a._v("rpcuser")]),a._v(" and "),e("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("server")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("159.69")]),a._v(".23.29\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("95.179")]),a._v(".192.102\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("149.56")]),a._v(".29.163\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("145.239")]),a._v(".149.173\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("178.63")]),a._v(".53.110\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("151.80")]),a._v(".108.76\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("185.137")]),a._v(".233.199\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcbind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcallowip")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n")])])]),e("p",[a._v("Restrict access to the "),e("code",[a._v("chips.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.chips/chips.conf\n")])])]),e("h3",{attrs:{id:"einsteinium-emc2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#einsteinium-emc2"}},[a._v("#")]),a._v(" Einsteinium (EMC2)")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-emc2-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-emc2-source"}},[a._v("#")]),a._v(" Step 1: Clone EMC2 source")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/emc2foundation/einsteinium -b master\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" einsteinium\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout c329ae6\n")])])]),e("h4",{attrs:{id:"step-2-create-a-build-script-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-a-build-script-3"}},[a._v("#")]),a._v(" Step 2: Create a build script")]),a._v(" "),e("p",[a._v("Name the script as "),e("code",[a._v("build.sh")]),a._v(" inside the "),e("code",[a._v("~/einsteinium")]),a._v(" dir for easy compiling and add the contents below to the script. The script will also create symlinks for the binaries at "),e("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),e("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC & 3P Coins build script for Ubuntu & Debian (c) Decker")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/einsteinium/src/einsteinium-cli /usr/local/bin/einsteinium-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/einsteinium/src/einsteiniumd /usr/local/bin/einsteiniumd\n")])])]),e("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-3"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),e("h4",{attrs:{id:"step-4-create-emc2-data-dir-einsteinium-conf-file-and-restrict-access-to-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-emc2-data-dir-einsteinium-conf-file-and-restrict-access-to-it"}},[a._v("#")]),a._v(" Step 4: Create EMC2 data dir, "),e("code",[a._v("einsteinium.conf")]),a._v(" file and restrict access to it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .einsteinium\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.einsteinium/einsteinium.conf\n")])])]),e("p",[a._v("Insert the following contents inside the "),e("code",[a._v("einsteinium.conf")]),a._v(" file and save it. (change the "),e("code",[a._v("rpcuser")]),a._v(" and "),e("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("server")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("bind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcbind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcallowip")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev_3p.smk.dog\n")])])]),e("p",[a._v("Restrict access to the "),e("code",[a._v("einsteinium.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.einsteinium/einsteinium.conf\n")])])]),e("h3",{attrs:{id:"marmarachain-mcl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#marmarachain-mcl"}},[a._v("#")]),a._v(" MarmaraChain (MCL)")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-mcl-source-and-compile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-mcl-source-and-compile"}},[a._v("#")]),a._v(" Step 1: Clone MCL source and compile")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/marmarachain/marmara -b master\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" marmara\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout a92d834\n./zcutil/build.sh -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("h3",{attrs:{id:"milevium-mil"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#milevium-mil"}},[a._v("#")]),a._v(" Milevium (MIL)")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-mil-source-and-compile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-mil-source-and-compile"}},[a._v("#")]),a._v(" Step 1: Clone MIL source and compile")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/emc2foundation/mil -b master\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" mil\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 578bed7\n")])])]),e("h4",{attrs:{id:"step-2-update-the-build-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-update-the-build-script"}},[a._v("#")]),a._v(" Step 2: Update the build script")]),a._v(" "),e("p",[a._v("Open the "),e("code",[a._v("build.sh")]),a._v(" script inside the "),e("code",[a._v("~/mil")]),a._v(" dir and replace the contents below to the script. The script will also create symlinks for the binaries at "),e("code",[a._v("/usr/local/bin/")]),a._v(" and for that, you will be asked to provide the "),e("code",[a._v("sudo")]),a._v(" password.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC & 3P Coins build script for Ubuntu & Debian (c) Decker")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/mil/src/mil-cli /usr/local/bin/mil-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/mil/src/mild /usr/local/bin/mild\n")])])]),e("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-4"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),e("h4",{attrs:{id:"step-4-create-mil-data-dir-mil-conf-file-and-restrict-access-to-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-mil-data-dir-mil-conf-file-and-restrict-access-to-it"}},[a._v("#")]),a._v(" Step 4: Create MIL data dir, "),e("code",[a._v("mil.conf")]),a._v(" file and restrict access to it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .mil\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.mil/mil.conf\n")])])]),e("p",[a._v("Insert the following contents inside the "),e("code",[a._v("mil.conf")]),a._v(" file and save it. (change the "),e("code",[a._v("rpcuser")]),a._v(" and "),e("code",[a._v("rpcpassword")]),a._v(" values)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("server")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("bind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcbind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcallowip")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev_3p.smk.dog\n")])])]),e("p",[a._v("Restrict access to the "),e("code",[a._v("mil.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.mil/mil.conf\n")])])]),e("h3",{attrs:{id:"sfusd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sfusd"}},[a._v("#")]),a._v(" SFUSD")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-sfusd-core-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-sfusd-core-source"}},[a._v("#")]),a._v(" Step 1: Clone sfusd-core source")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/pbcllc/sfusd-core\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~/sfusd-core\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 4e79e1b\n")])])]),e("h4",{attrs:{id:"build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[a._v("#")]),a._v(" Build")]),a._v(" "),e("ul",[e("li",[a._v("Create a file named "),e("code",[a._v("build.sh")]),a._v(" in the "),e("code",[a._v("~/sfusd-core")]),a._v(" directory and copy the contents of the following code block into it")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# LTC & 3P Coins build script for Ubuntu & Debian (c) Decker")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/sfusd-core/src/smartusd-cli /usr/local/bin/smartusd-cli\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/sfusd-core/src/smartusdd /usr/local/bin/smartusdd\n")])])]),e("h4",{attrs:{id:"step-3-make-the-script-executable-and-run-it-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-make-the-script-executable-and-run-it-5"}},[a._v("#")]),a._v(" Step 3: Make the script executable and run it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x build.sh\n./build.sh\n")])])]),e("ul",[e("li",[a._v("Supply your "),e("code",[a._v("sudo")]),a._v(" password when asked, so that the daemon and cli can be symlinked to your "),e("code",[a._v("/usr/local/bin")]),a._v(" directory")])]),a._v(" "),e("h4",{attrs:{id:"step-4-create-sfusd-data-dir-smartusd-conf-file-and-restrict-access-to-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-create-sfusd-data-dir-smartusd-conf-file-and-restrict-access-to-it"}},[a._v("#")]),a._v(" Step 4: Create SFUSD data dir, smartusd.conf file and restrict access to it")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" .smartusd\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" ~/.smartusd/smartusd.conf\n")])])]),e("p",[a._v("Insert the following contents inside the smartusd.conf file and save it. (change the rpcuser and rpcpassword values)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("server")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("daemon")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("txindex")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcuser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcpassword")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("password\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("bind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcbind")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("rpcallowip")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("na_3p.smk.dog\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("addnode")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dev_3p.smk.dog\n")])])]),e("p",[a._v("Restrict access to the smartusd.conf file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v(" ~/.smartusd/smartusd.conf\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[a._v("SFUSD's address and wif format are the same as KMD. You can import your 3p KMD node's wif into the SFUSD daemon directly.")]),a._v(" "),e("p",[a._v("SFUSD's rpc calls are similar to BTC's after version "),e("code",[a._v("v0.16")]),a._v(". So instead of "),e("code",[a._v("getinfo")]),a._v(", use other rpc like "),e("code",[a._v("getblockchaininfo")]),a._v(", "),e("code",[a._v("getnetworkinfo")]),a._v(", "),e("code",[a._v("getwalletinfo")]),a._v(", "),e("code",[a._v("getmininginfo")]),a._v(" for the appropriate fields.")])]),a._v(" "),e("h3",{attrs:{id:"tokel-tkl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tokel-tkl"}},[a._v("#")]),a._v(" Tokel (TKL)")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-tkl-source-and-compile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-tkl-source-and-compile"}},[a._v("#")]),a._v(" Step 1: Clone TKL source and compile")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/TokelPlatform/tokel -b tokel\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" tokel\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout 65d50d0\n./zcutil/build.sh -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("p",[a._v("Symlink the compiled binaries")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/tokel/src/tokeld /usr/local/bin/tokeld\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/tokel/src/tokel-cli /usr/local/bin/tokel-cli\n")])])]),e("h3",{attrs:{id:"veruscoin-vrsc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#veruscoin-vrsc"}},[a._v("#")]),a._v(" VerusCoin (VRSC)")]),a._v(" "),e("h4",{attrs:{id:"step-1-clone-vrsc-source-and-compile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-clone-vrsc-source-and-compile"}},[a._v("#")]),a._v(" Step 1: Clone VRSC source and compile")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/VerusCoin/VerusCoin -b master\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" VerusCoin\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# git checkout (TBA: final commit in review)")]),a._v("\n./zcutil/build.sh -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("p",[a._v("Symlink the compiled binaries")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/VerusCoin/src/verusd /usr/local/bin/verusd\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -sf /home/"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v("/VerusCoin/src/verus /usr/local/bin/verus\n")])])]),e("h3",{attrs:{id:"start-the-daemons-and-sync-all-the-chains-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-the-daemons-and-sync-all-the-chains-2"}},[a._v("#")]),a._v(" Start the daemons and sync all the chains")]),a._v(" "),e("p",[a._v("For the first time sync, we will run all the coin daemons normally. Make sure you have successfully compiled all the daemons from the above section. We will create a "),e("code",[a._v("start")]),a._v(" script later in this guide to start the chains with "),e("code",[a._v("-pubkey")]),a._v(" option for notarization.")]),a._v(" "),e("h3",{attrs:{id:"start-the-coins-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-the-coins-2"}},[a._v("#")]),a._v(" Start the coins")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodod "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\naryacoind "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nchipsd "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\neinsteiniumd "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/marmara/src/komodod -ac_name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("MCL -ac_supply"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000000")]),a._v(" -ac_cc"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" -addnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.189")]),a._v(".149.242 -addnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("161.97")]),a._v(".146.150 -addnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("149.202")]),a._v(".158.145 -addressindex"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -spentindex"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -ac_marmara"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -ac_staked"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("75")]),a._v(" -ac_reward"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3000000000")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nmild "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nsmartusdd "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\ntokeld "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nverusd "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n")])])]),e("p",[a._v("Now wait for all the chains to finish syncing. This might take about 8-10 hours depending on your machine and internet connection. You can check check sync progress by using "),e("code",[a._v("tail -f")]),a._v(" on the "),e("code",[a._v("debug.log")]),a._v(" file in the respective coin data directories.")]),a._v(" "),e("p",[a._v("Commands to tail "),e("code",[a._v("debug.log")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# KMD")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# AYA")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.aryacoin/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# CHIPS")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.chips/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# EMC2")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.einsteinium/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# MCL")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/MCL/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# MIL")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.mil/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# SFUSD")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.smartusd/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TOKEL")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/TOKEL/debug.log\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# VRSC")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("tail")]),a._v(" -f ~/.komodo/VRSC/debug.log\n")])])]),e("p",[a._v("You can now wait for all the coins to finish syncing. Just double check the block you've downloaded with an explorer to verify.")]),a._v(" "),e("h3",{attrs:{id:"import-3rd-party-private-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import-3rd-party-private-key"}},[a._v("#")]),a._v(" Import 3rd party private key")]),a._v(" "),e("p",[a._v("Feel free to import your addresses whilst your daemons are syncing.")]),a._v(" "),e("ul",[e("li",[a._v("Follow the example below to import your 3rd party pubkey "),e("strong",[a._v("only")]),a._v(" into your coin daemons.")])]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodo-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\naryacoin-cli importprivkey T6oxgc9ZYJA1Uvsm31Gb8Mg31hHgLWue7RuqQMjEHUWZEi5TdskL\nchips-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\neinsteinium-cli importprivkey T7trfubd9dBEWe3EnFYfj1r1pBueqqCaUUVKKEvLAfQvz3JFsNhs\nkomodo-cli -ac_name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("MCL importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\nmil-cli importprivkey cSXsCzbmiZUyMCZyPqjYMhLxBxcFBP6tQSLrCpTpfYkvjJEMthcW\nsmartusd-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\ntokel-cli importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\nverus importprivkey UtrRXqvRFUAtCrCTRAHPH6yroQKUrrTJRmxt2h5U4QTUN1jCxTAh\n")])])]),e("p",[a._v("This may take some time and will display the coin name and address after each import. You can tail the coin specific "),e("code",[a._v("debug.log")]),a._v(" files to check the progress.")]),a._v(" "),e("h3",{attrs:{id:"validate-the-addresses-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#validate-the-addresses-2"}},[a._v("#")]),a._v(" Validate the addresses")]),a._v(" "),e("p",[a._v("After all the addresses are imported, using the respective "),e("code",[a._v("<COIN>-cli")]),a._v(", validate all addresses and make sure the response has "),e("code",[a._v("ismine:true")]),a._v(". If you have "),e("code",[a._v("ismine:false")]),a._v(", your address hasn't imported correctly and dPoW will not work for that coin. Sample command for that is below.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodo-cli validateaddress RVNKRr2uxPMxJeDwFnTKjdtiLtcs7UzCZn\n")])])]),e("h4",{attrs:{id:"copy-the-pubkey-txt-file-that-we-created-from-the-dpow-iguana-dir-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy-the-pubkey-txt-file-that-we-created-from-the-dpow-iguana-dir-2"}},[a._v("#")]),a._v(" Copy the "),e("code",[a._v("pubkey.txt")]),a._v(" file that we created from the "),e("code",[a._v("~/dPoW/iguana")]),a._v(" dir")]),a._v(" "),e("p",[a._v("You will need to create a "),e("code",[a._v("pubkey.txt")]),a._v(" file inside "),e("code",[a._v("~/komodo/src/")]),a._v(". This file will be used to start all of your daemons with the "),e("code",[a._v("-pubkey=")]),a._v(" parameter in your "),e("code",[a._v("start")]),a._v(" script that will be made later in this guide.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" ~/dPoW/iguana/pubkey.txt ~/komodo/src/pubkey.txt\n")])])]),e("h3",{attrs:{id:"stop-all-the-coin-daemons-safely-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stop-all-the-coin-daemons-safely-2"}},[a._v("#")]),a._v(" Stop All the Coin Daemons Safely")]),a._v(" "),e("p",[a._v("Once your daemons have completed syncing, you've imported and validated all your keys, complete the following.")]),a._v(" "),e("p",[a._v("Never use "),e("code",[a._v("kill -9")]),a._v(" to kill any Coin daemon if you don't like corrupt databases. Always shutdown wallet daemon and iguana gracefully with "),e("code",[a._v("pkill -15 iguana")]),a._v(" or use the below RPC commands for wallets.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("komodo-cli stop\naryacoin-cli stop\nchips-cli stop\neinsteinium-cli stop\nkomodo-cli -ac_name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("MCL stop\nmil-cli stop\ntokel-cli stop\nsmartusd-cli stop\nverus stop\n")])])]),e("hr"),a._v(" "),e("h2",{attrs:{id:"set-ulimit-parameters-on-ubuntu-permanently"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-ulimit-parameters-on-ubuntu-permanently"}},[a._v("#")]),a._v(" Set "),e("code",[a._v("ulimit")]),a._v(" parameters on Ubuntu permanently")]),a._v(" "),e("p",[a._v("By default, the number of open files per user in Ubuntu is 1024. In our case this number is too small so we will increase it.")]),a._v(" "),e("p",[a._v("This is done with the "),e("code",[a._v("ulimit")]),a._v(" command:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("ulimit")]),a._v(" -a   "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# see all the kernel parameters")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("ulimit")]),a._v(" -n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# see the number of open files")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("ulimit")]),a._v(" -n "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),a._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  set the number open files to 1000000")]),a._v("\n")])])]),e("p",[a._v("The problem with this way is that the "),e("code",[a._v("ulimit")]),a._v(" parameter is only set currently for this command terminal and user. This means that after a reboot you’ll need to set the parameter again. Do the following to set it permanently:")]),a._v(" "),e("h3",{attrs:{id:"edit-the-etc-security-limits-conf-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#edit-the-etc-security-limits-conf-file"}},[a._v("#")]),a._v(" Edit the "),e("code",[a._v("/etc/security/limits.conf")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" /etc/security/limits.conf\n")])])]),e("p",[a._v("add these lines:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("* soft nofile "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),a._v("\n* hard nofile "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000000")]),a._v("\n")])])]),e("p",[a._v("Save and close file")]),a._v(" "),e("h3",{attrs:{id:"edit-the-etc-pam-d-common-session-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#edit-the-etc-pam-d-common-session-file"}},[a._v("#")]),a._v(" Edit the "),e("code",[a._v("/etc/pam.d/common-session")]),a._v(" file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("nano")]),a._v(" /etc/pam.d/common-session\n")])])]),e("p",[a._v("add this line:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("session required pam_limits.so\n")])])]),e("p",[a._v("Save and close the file.")]),a._v(" "),e("p",[a._v("We are done. Now let's stop all our wallet daemons safely with RPC commands and reboot the server using "),e("code",[a._v("sudo reboot")]),a._v(" or "),e("code",[a._v("sudo shutdown -r")]),a._v(" command.")]),a._v(" "),e("h3",{attrs:{id:"check-the-values-now"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check-the-values-now"}},[a._v("#")]),a._v(" Check the values now")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("ulimit")]),a._v(" -n\n")])])]),e("hr"),a._v(" "),e("h2",{attrs:{id:"create-a-start-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-start-script"}},[a._v("#")]),a._v(" Create a "),e("code",[a._v("start")]),a._v(" Script")]),a._v(" "),e("p",[a._v("We need a "),e("code",[a._v("start")]),a._v(" script in the home dir to start Komodo, Smart Chains and all 3rd party coin daemons with the "),e("code",[a._v("-pubkey")]),a._v(" option. "),e("code",[a._v("-pubkey")]),a._v(" is not required for LTC daemon. All other coins need it.")]),a._v(" "),e("p",[a._v("Here is an example of a Main Server start script that will start Notary easy mining on Komodo as well:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" ~/komodo/src/pubkey.txt\nlitecoind "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("60")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" komodo/src\n./komodod -gen -genproclimit"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" -minrelaytxfee"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000035")]),a._v(" -opretmintxfee"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.004")]),a._v(" -notary"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('".litecoin/litecoin.conf"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("600")]),a._v("\n./assetchains\n")])])]),e("p",[a._v("Here is an example of a 3rd Party Server start script :")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" ~/komodo/src/pubkey.txt\naryacoind -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nchipsd -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\neinsteiniumd -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nmild -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/marmara/src/komodod -ac_name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("MCL -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" -ac_supply"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000000")]),a._v(" -ac_cc"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" -addnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.189")]),a._v(".149.242 -addnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("161.97")]),a._v(".146.150 -addnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("149.202")]),a._v(".158.145 -addressindex"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -spentindex"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -ac_marmara"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -ac_staked"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("75")]),a._v(" -ac_reward"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3000000000")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\nsmartusdd -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/tokel/src/tokeld -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/komodo/src/komodod -notary -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n~/VerusCoin/src/verusd -pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$pubkey")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n")])])]),e("p",[a._v("Make the file executable:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x start\n")])])]),e("h3",{attrs:{id:"execute-the-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#execute-the-script"}},[a._v("#")]),a._v(" Execute the script")]),a._v(" "),e("p",[a._v("This may take upto 20-30 minutes maximum depending on your system spec.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n./start\n")])])]),e("p",[e("strong",[a._v("Make sure all daemons started properly before starting iguana in the next step.")])]),a._v(" "),e("h2",{attrs:{id:"start-iguana-and-dpow-process"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-iguana-and-dpow-process"}},[a._v("#")]),a._v(" Start "),e("code",[a._v("iguana")]),a._v(" and dPoW process")]),a._v(" "),e("p",[a._v("Once all required daemons are running, we have funds on all coins(DM @kolo with your addresses if you need coins), we can go ahead and start "),e("code",[a._v("iguana")]),a._v(".")]),a._v(" "),e("h3",{attrs:{id:"main-server-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-server-3"}},[a._v("#")]),a._v(" Main Server")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~/dPoW/iguana\n./m_notary_main\n")])])]),e("p",[a._v("You can use the "),e("code",[a._v("m_notary")]),a._v(" script if you wish, but this will issue a "),e("code",[a._v("git pull")]),a._v(" command to update the repo, remove old iguana, compile fresh and start the whole process. This can take about 10 minutes maximum to finish. You will see "),e("code",[a._v("INIT with 64 notaries")]),a._v(" once the process finishes.")]),a._v(" "),e("h3",{attrs:{id:"_3rd-party-server-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3rd-party-server-2"}},[a._v("#")]),a._v(" 3rd Party Server")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~/dPoW/iguana\n./m_notary_3rdparty\n")])])]),e("h2",{attrs:{id:"address-whitelisting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#address-whitelisting"}},[a._v("#")]),a._v(" Address whitelisting")]),a._v(" "),e("p",[a._v("If you are using a whitelist for incoming transactions (recommended to avoid dust attacks!) funding top ups will come from "),e("code",[a._v("RDragoNHdwovvsDLSLMiAEzEArAD3kq6FN")]),a._v(" for your Main node, and "),e("code",[a._v("RHound8PpyhVLfi56dC7MK3ZvvkAmB3bvQ")]),a._v(" for your 3P node, so add these addresses to your respective whitelists.")]),a._v(" "),e("h2",{attrs:{id:"firewall-and-ports"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#firewall-and-ports"}},[a._v("#")]),a._v(" Firewall and Ports")]),a._v(" "),e("p",[a._v("Enable "),e("code",[a._v("ufw")]),a._v(" and close all routes except "),e("code",[a._v("ssh")]),a._v(". Then allow p2p ports of all the coins in their respective servers. Allow iguana's p2p ports: "),e("code",[a._v("13347")]),a._v(" in main server and "),e("code",[a._v("13344")]),a._v(" in the 3p server.")]),a._v(" "),e("h2",{attrs:{id:"nn-scripts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nn-scripts"}},[a._v("#")]),a._v(" NN Scripts")]),a._v(" "),e("p",[a._v("There are many open sourced scripts for managing your Komodo Notary Node servers. If you're having trouble with something, you can have a look at "),e("a",{attrs:{href:"https://github.com/KomodoPlatform/komodotools",target:"_blank",rel:"noopener noreferrer"}},[a._v("these tools"),e("OutboundLink")],1),a._v(", or ask the other NN's, who will show you the scripts they use to overcome issues. With that being said, if you find a way to make a job easier or find a way to better the ecosystem, please let the rest of the NN OPs know, we would love to hear it.")]),a._v(" "),e("h2",{attrs:{id:"mm2-seed-node-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mm2-seed-node-setup"}},[a._v("#")]),a._v(" MM2 Seed node setup")]),a._v(" "),e("p",[a._v("Simple scripts to setup and configure MM2 as a seednode on your 3P server are available at - "),e("a",{attrs:{href:"https://github.com/smk762/nn_mm2_seed",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/smk762/nn_mm2_seed"),e("OutboundLink")],1),a._v(". The mm2 seed node will also need ports "),e("code",[a._v("38890")]),a._v(" and "),e("code",[a._v("38900")]),a._v(" opened on the 3p server.")]),a._v(" "),e("h1",{attrs:{id:"setup-for-debian-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup-for-debian-11"}},[a._v("#")]),a._v(" Setup for Debian 11")]),a._v(" "),e("p",[a._v("Install the following dependancies:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo apt-get install -y tmux dc bc dnsutils speedtest-cli build-essential git libsodium-dev libssl-dev pkg-config autoconf automake bsdmainutils cmake curl g++-multilib htop libboost-all-dev libc6-dev libgtest-dev libtool m4 software-properties-common unzip wget zlib1g-dev binutils-dev clang jq libcurl4-openssl-dev libdb++-dev libevent-dev libexpat1-dev libgnutls28-dev libldns-dev liblzma-dev libnanomsg-dev libncurses-dev libprotobuf-dev libqrencode-dev libreadline-dev libunwind-dev ncurses-dev ntp ntpdate protobuf-compiler python3-pip\n")])])]),e("p",[a._v("Use the template below to create build scripts for coins as needed:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# AnyCoin compile script (q) Decker, 2021-2022")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" -C "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PWD")]),a._v("}")]),a._v("/depends "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_PROTON")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NO_QT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HOST")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\n./autogen.sh\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CXXFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-g0 -O2"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CONFIG_SITE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),a._v("/depends/"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("depends/config.guess"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('/share/config.site"')]),a._v(" ./configure --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --with-gui"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("no --disable-bip70\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("V")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" -j"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("nproc --all"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);